#include <cuda_runtime.h>
#include "forceErosionSimulator_types.h"
#include "util/cuda_util.h"
#include "util/global.h"
#include <vector>
#include "waterPipeSimulator_types.h"

#define timeStep 0.1
//-----------------------------------------------------------------------------
// Compute Sediment kernel
//-----------------------------------------------------------------------------
__global__ void computeSediment(float* sedimentField, size_t sedimentPitch, 
	cell2* velocityField, size_t velocityPitch, 
	float* waterField, size_t waterPitch,
	float* lastWaterField, size_t lastWaterPitch,
	layer* layers, unsigned int layerCount, 
	cell4* flowField, size_t flowFieldPitch,
	bool* activeBlocks, size_t abPitch,
	dim3 N)
{
	//early exit check
	bool* abPtr = (bool*)((char*)activeBlocks + blockIdx.x * abPitch) + blockIdx.y;
	if(!*abPtr)
		return;

	DEFINE_DEFAULT_KERNEL_WORKID_2D(i,j);
	RETURN_IF_OUTSIDE_2D(i,j,N);
	/*
	//-------------------------------------------------------------
	// compute velocity ( positive velocity in direction of growing indices )
	//-------------------------------------------------------------
	cell2* velPtr = (cell2*)((char*)velocityField + i * velocityPitch) + j;
	
	float* waterPtr  = (float*)((char*)waterField + i * waterPitch) + j;
	float* lastWaterPtr  = (float*)((char*)lastWaterField + i * lastWaterPitch) + j;
	float whAvg = 0.5f * ( *waterPtr + *lastWaterPtr);
	

	float topFieldLowerOut, bottomFieldUpperOut, leftFieldRightOut, rightFieldLeftOut;
	//argh, hopefully not to bad for performance
	if( i == 0)
		topFieldLowerOut = 0.0f;
	else
		topFieldLowerOut = ((cell4*)((char*)flowField + (i-1) * flowFieldPitch) + j)->B;

	if( i == (N.x - 1))
		bottomFieldUpperOut = 0.0f;
	else
		bottomFieldUpperOut = ((cell4*)((char*)flowField + (i+1) * flowFieldPitch) + j)->T;

	if( j == 0)
		leftFieldRightOut = 0.0f;
	else
		leftFieldRightOut = ((cell4*)((char*)flowField + i * flowFieldPitch) + (j-1))->R;

	if( j == (N.y - 1))
		rightFieldLeftOut = 0.0f;
	else
		rightFieldLeftOut = ((cell4*)((char*)flowField + i * flowFieldPitch) + (j+1))->L;

	cell4* thisOflow = (cell4*)((char*)flowField + i * flowFieldPitch) + j;
	velPtr->x = (topFieldLowerOut - thisOflow->T + thisOflow->B - bottomFieldUpperOut)/whAvg;
	velPtr->z = (leftFieldRightOut - thisOflow->L + thisOflow->R - rightFieldLeftOut)/whAvg;
	
	//-------------------------------------------------------------
	// compute capacity
	//-------------------------------------------------------------
	float capacity = hypotf(velPtr->x,velPtr->z)*0.1;

	//-------------------------------------------------------------
	// compute sediment level
	//-------------------------------------------------------------
	float constAmount = 0.1;
	float* sedimentPtr = ((float*)((char*)sedimentField + i * sedimentPitch) + j);
	float* layerPtr = ((float*)((char*)layers[0].ptr + i * layers[0].pitch ) + j);

	if(*sedimentPtr > capacity)
	{
		*sedimentPtr -= constAmount;
		*layerPtr += constAmount;
	}
	else if( *sedimentPtr < capacity)
	{
		*sedimentPtr += constAmount;
		*layerPtr -= constAmount;
	}*/


}
extern void cw_computeSediment( floatMem& sedimentField, cell2Mem& velocityField,
	std::vector<floatMem> layers,  cell4Mem& flowField , byteMem& activeBlocks ,
	floatMem& water, floatMem& lastWater, size_2D size)
{
	//convert material layer vector to array
	layer* linfo = new layer[layers.size()];
	for(int i = 0; i < layers.size(); ++i)
	{
		linfo[i].pitch = layers[i].pitch;
		linfo[i].ptr = layers[i].devPtr;
	}

	//stream layer info to device
	layer* linfoD;
	checkCudaErrors(cudaMalloc(&linfoD, layers.size() * sizeof(layer)) );
	checkCudaErrors(cudaMemcpy(linfoD,linfo,    layers.size() * sizeof(layer), 
		            cudaMemcpyHostToDevice));
	delete[] linfo;

	computeSediment <<< getNumBlocks2D(size), getThreadsPerBlock2D() >>>
		(sedimentField.devPtr, sedimentField.pitch, 
		velocityField.devPtr, velocityField.pitch, 
		water.devPtr, water.pitch,
		lastWater.devPtr, lastWater.pitch,
		linfoD, layers.size(), 
		flowField.devPtr, flowField.pitch, 
		activeBlocks.devPtr, activeBlocks.pitch 
		, dim3FromSize_2D(size));
	checkCudaErrors(cudaGetLastError());

	//free layer info
	checkCudaErrors(cudaFree(linfoD));
}
/*
//-----------------------------------------------------------------------------
// Compute Sediment Transport kernel
//-----------------------------------------------------------------------------

__global__ void computeSedimentTransport(float* sedimentField, size_t sedimentPitch, 
	cell2* velocityField, size_t velocityPitch, 
	bool* activeBlocks, size_t abPitch,
	dim3 N)
{
	//early exit check
	bool* abPtr = (bool*)((char*)activeBlocks + blockIdx.x * abPitch) + blockIdx.y;
	if(!*abPtr)
		return;

	DEFINE_DEFAULT_KERNEL_WORKID_2D(i,j);
	RETURN_IF_OUTSIDE_2D(i,j,N);

	
	cell2* velPtr = (cell2*)((char*)velocityField + i * velocityPitch) + j;

	float* thisCell = (float*)((char*)sedimentField + i * sedimentPitch) + j;
	float lower,upper,left,right;

	//boundary conditions
	if( i == 0)
		upper = *thisCell;
	else
		upper = *( (float*)((char*)sedimentField + (i-1) * sedimentPitch) + j);

	if( i == (N.x - 1))
		lower = *thisCell;
	else
		lower = *( (float*)((char*)sedimentField + (i+1) * sedimentPitch) + j);

	if( j == 0)
		left = *thisCell;
	else
		left = *( (float*)((char*)sedimentField + i * sedimentPitch) + (j-1));

	if( j == (N.y - 1))
		right = *thisCell;
	else
		right = *( (float*)((char*)sedimentField + i * sedimentPitch) + (j+1));
	
	//euler explicit advection
	float prec = timeStep * 0.5f;
	*thisCell = - velPtr->x * prec * (lower - upper)
				- velPtr->z * prec* (right - left)
				+ *thisCell;
}

extern void cw_computeSedimentTransport(floatMem& sedimentField, cell2Mem& velocityField, 
	byteMem& activeBlocks, size_2D size)
{
	computeSedimentTransport <<< getNumBlocks2D(size) , getThreadsPerBlock2D() >>>
		(sedimentField.devPtr, sedimentField.pitch, velocityField.devPtr, 
		velocityField.pitch,activeBlocks.devPtr, activeBlocks.pitch ,dim3FromSize_2D(size));
	checkCudaErrors(cudaGetLastError());
}
*/































#include "forceErosionSimulator.h"

#include "waterPipeSimulator_types.h"
#include <vector>

extern void cw_memsetFloat2D(floatMem field, size_2D size,  float value);

extern void cw_computeSediment( floatMem& sedimentField, cell2Mem& velocityField,
	std::vector<floatMem> layers,  cell4Mem& flowField , byteMem& activeBlocks ,
	floatMem& water, floatMem& lastWater, size_2D size);

extern void cw_computeSedimentTransport(floatMem& sedimentField, cell2Mem& velocityField, 
	byteMem& activeBlocks, size_2D size);

ForceErosionSimulator::ForceErosionSimulator()
: active(true)
, deltaT(DEFAULT_TIMESTEP)
{}

void ForceErosionSimulator::copySettings(ForceErosionSimulator& from)
{
	deltaT = from.deltaT;
	active = from.active;
}

void ForceErosionSimulator::step()
{
	//compute sediment amounts
	cw_computeSediment(sediment,velocities, ter->layers(), rc->flowField, ter->activeBlocks(), 
		ter->water(), lastWater , ter->size());
	//transport
	//cw_computeSedimentTransport(sediment, velocities , ter->activeBlocks() ,ter->size());

	//obtain last height values (for next step)
	checkCudaErrors(cudaMemcpy2D(lastWater.devPtr, lastWater.pitch,
		ter->water().devPtr, ter->water().pitch, ter->size().z * sizeof(float), ter->size().x,
		cudaMemcpyDeviceToDevice));
}

void ForceErosionSimulator::initialize(SharedCudaResources* rc, TerrainWorkHandle* ter)
{
	this->rc = rc;
	this->ter = ter;

	//alloc and init last water
	checkCudaErrors(cudaMallocPitch(&lastWater.devPtr, &lastWater.pitch, 
		ter->size().width * sizeof(float), ter->size().height));
	cw_memsetFloat2D(lastWater,ter->size(),0.0f);

	//alloc and init sediment
	checkCudaErrors(cudaMallocPitch(&sediment.devPtr, &sediment.pitch, 
		ter->size().width * sizeof(float), ter->size().height));
	cw_memsetFloat2D(sediment,ter->size(),0.0f);
	//alloc velocities field
	checkCudaErrors(cudaMallocPitch(&velocities.devPtr, &velocities.pitch, sizeof(cell2) * ter->size().width,
		ter->size().height));
}

void ForceErosionSimulator::cleanUp()
{
	checkCudaErrors(cudaFree(lastWater.devPtr));
	checkCudaErrors(cudaFree(sediment.devPtr));
	checkCudaErrors(cudaFree(velocities.devPtr));
}